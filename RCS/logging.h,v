head	5.1;
access;
symbols;
locks
	murphy:5.1.8.1; strict;
comment	@ * @;


5.1
date	2014.11.11.12.11.56;	author murphy;	state Exp;
branches
	5.1.8.1;
next	1.4;

1.4
date	2004.09.10.11.43.48;	author murphy;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.20.16.26.39;	author murphy;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.09.16.15.44;	author murphy;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.04.23.56.41;	author murphy;	state Exp;
branches;
next	;

5.1.8.1
date	2014.11.11.12.11.56;	author murphy;	state Exp;
branches;
next	;


desc
@Working. Supports SR630.
@


5.1
log
@5.1
@
text
@#ifndef __Logging_h__
#define __Logging_h__

#pragma interface

#include <semaphore.h>
#include <sys/types.h>
#include <sys/time.h>
#include <pthread.h>
#include <stdio.h>

class Logging {
    pthread_mutex_t logging_mutex ;
    FILE *Log ;
    void Write( const void*, const void*, const void* ) ;
    void Lock( void ) ;
    void Unlock( void ) ;
public:
    Logging(const u_char*) ;
    ~Logging() ;
    void L_Write_U( const void *src, const void *level, const void *txt ) ;
    void L_Command_U( const void *src, const void *cmd, const void *rtn ) ;
} ;

EXTERN Logging *StatusLog INITVALUE(0) ;

#define MAX_Q_LOG	(16)

class OCFStatus {
    pthread_mutex_t ocf_logging_mutex ;
    u_char Dir[1024] ;
    int bWriteStatus ;
    pthread_t m_t_timer ;
    sem_t sem_writing ;
    pthread_t m_t_writer ;
    int m_interval ;
    int q_log_a ;
    int q_log_p ;
    int t_requests ;
public:
    OCFStatus( u_char* ) ;
    void StartThread( void ) ;
    void StopOps( void ) ;
    void SetInterval( int ) ;
    void LoggingTimer( void ) ;
    void LoggingWriter( void ) ;
    void AddStatus( int, u_char*, u_char*, u_char* ) ;
    int NoStatus( int ) ;
    void Disconnected( int ) ;
    void Reconnected( int ) ;
    int RequestStatus( int ) ;
} ;

EXTERN OCFStatus *OCF_Status INITVALUE(0) ;

#endif // __Logging_h__
@


5.1.8.1
log
@5.1.8.1
@
text
@@


1.4
log
@Working system. Backing up.
@
text
@d32 1
d43 1
@


1.3
log
@Working, but revising LOG notation, changing to DBG.
@
text
@d46 3
@


1.2
log
@Working.
@
text
@d15 3
d21 2
a22 9
    void Write( const void*, const void*, const void* ) ;
    void Lock( void ) ;
    void Unlock( void ) ;
    inline void L_Write_U( const void *src, const void *level, const void *txt )
    {
	Lock() ;
	Write( src, level, txt ) ;
	Unlock() ;
    } ;
@


1.1
log
@Initial revision
@
text
@d49 1
a49 1
    void AddStatus( int, u_char* ) ;
@
