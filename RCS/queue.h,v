head	5.1;
access;
symbols;
locks
	murphy:5.1.8.1; strict;
comment	@ * @;


5.1
date	2014.11.11.12.11.56;	author murphy;	state Exp;
branches
	5.1.8.1;
next	1.4;

1.4
date	2004.06.30.17.50.08;	author murphy;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.16.15.44;	author murphy;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.04.23.56.41;	author murphy;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.03.13.01.45;	author murphy;	state Exp;
branches;
next	;

5.1.8.1
date	2014.11.11.12.11.56;	author murphy;	state Exp;
branches;
next	;


desc
@Defines Queue class.
@


5.1
log
@5.1
@
text
@#ifndef __Queue_h__
#define __Queue_h__
#pragma interface
#include <sys/types.h>
#include <sys/time.h>
#include <pthread.h>
#include <semaphore.h>

const int MAX_Q_REQUEST = 256 ;
const int MAX_Q_RESPONSE = 256 ;

class Queue {
    pthread_mutex_t queue_mutex ;
    static const int MaxQ = 8 ;
    struct queue {
	u_char request[MAX_Q_REQUEST] ;
	u_char response[MAX_Q_RESPONSE] ;
	pthread_cond_t sem_wait ;
	pthread_mutex_t mx_sem_wait ;
	volatile int retval ;
	volatile bool inuse, waiting ;
	volatile int mPeriodic ;
    } queues[MaxQ] ;
    volatile int b_queue, e_queue ;
    volatile int max_q_length ;
public:
    Queue() ;
    void InitQueue( void ) ;
    int AddTransaction( u_char*, bool, int = -1 ) ;
    int WaitTransaction( int, int ) ;
    void GetNextTransaction( void ) ;
    const u_char * GetRequest( void ) ;
    int GetWaiting( void ) ;
    void SetResponse( const void* ) ;
    void ReleaseWait( void ) ;
    void ReleaseTransaction( int ) ;
    void ReleaseThisTransaction( void ) ;
    const u_char * GetResponse( int ) ;
    int MaxQueue( void ) ;
} ;

#endif // __Queue_h__
@


5.1.8.1
log
@5.1.8.1
@
text
@@


1.4
log
@Found bug in queue handling. Depend upon labview timeout.
@
text
@@


1.3
log
@Working.
@
text
@d20 3
a22 3
	int retval ;
	bool inuse, waiting ;
	int mPeriodic ;
d24 2
a25 3
    int b_queue, e_queue ;

    int q_length ;
d28 1
d39 1
@


1.2
log
@Working. Supports SR630.
@
text
@a10 1
const int MAXQ = 8 ;
d14 1
d23 1
a23 1
    } queues[MAXQ] ;
@


1.1
log
@Initial revision
@
text
@d9 2
a10 8
#ifdef FILE_H_HAVE
#undef FILE_H_HAVE
#endif
#define FILE_H_HAVE (3)
#include "extern.h"

const int MAX_REQUEST = 256 ;
const int MAX_RESPONSE = 256 ;
d16 2
a17 3
	u_char request[MAX_REQUEST] ;
	u_char response[MAX_RESPONSE] ;
	// sem_t sem_wait ;
d21 2
a22 1
	bool inuse ;
d29 1
a29 1
    int AddTransaction( u_char* ) ;
d33 2
a34 1
    void SetResponse( const u_char* ) ;
d37 1
@
