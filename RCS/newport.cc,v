head	1.3;
access;
symbols;
locks
	murphy:1.3; strict;
comment	@// @;


1.3
date	2004.06.20.16.26.39;	author murphy;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.15.12.49.10;	author murphy;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.09.16.15.10;	author murphy;	state Exp;
branches;
next	;


desc
@Working.
@


1.3
log
@Working, but revising LOG notation, changing to DBG.
@
text
@#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <termio.h>
#include <unistd.h>

#include <iostream>

#pragma implementation

#include "global.h"
#include "stream.h"
#include "client.h"
#include "newport.h"
#include "support.h"
#include "periodic.h"

Newport::Newport( void )
{
    r_timeo = 1000 ; // 1.0 secs
    w_timeo = 5000 ; // 5.0 secs
    devtype = TypeNewport ;
    devtypestring = "Newport MM 4005" ;
    cycle = 2000 ; // 2.0 secs
    DOLOG(9)(LOGDEV, "Leaving newport constructor.\n" ) ; 
}

void Newport::StartOps( void )
{
    DOLOG(9)(LOGDEV, "%s: Newport being started up.\n", name ) ;
    mStatus = OCF_Status->RequestStatus( 7 ) ; // Three positions & states.

    u_char temp[256] ;
    char *(fmts)[2] = { "%s position get", "%s state get" } ;

    for( int i = 0 ; i < nPeriodics ; i++ ) {
        snprintf( CP temp, 256, fmts[i], getAlias() ) ;
        mPeriodics[i] = PeriodicQ->Add( getDevice(), temp ) ;
    }

    StartThread() ;
}

void Newport::StartPeriodicTasks( void )
{
    if( delay < 0 ) delay = cycle ;
    for( int i = 0 ; i < nPeriodics ; i++ ) {
        PeriodicQ->SetPeriod( mPeriodics[i], cycle ) ;
        PeriodicQ->Schedule( mPeriodics[i], delay + 500*i ) ;
        PeriodicQ->Enable( mPeriodics[i] ) ;
    }
}

void Newport::StopPeriodicTasks( void )
{
    for( int i = 0 ; i < nPeriodics ; i++ ) {
        PeriodicQ->Disable( mPeriodics[i] ) ;
    }
}

int Newport::DeviceOpen( void )
{
    StartPeriodicTasks() ;
    return( true ) ;
}

void Newport::DeviceClose( void )
{
    StopPeriodicTasks() ;
}

// Only returns false if we deem a communication error demands or implies
// a disconnect.
int Newport::Retrieve( u_char *resp, int mlen ) 
{
    u_char temp[256] ;

    if( strcasecmp( CP client_cmd.cmd[1], "position" ) == 0 ) {
        int nexc = Exchange( UCP "0TP", w_timeo, temp, sizeof(temp), r_timeo ) ;
        if( nexc <= 0 ) return( (nexc==0) ) ;

	double posn[3] ;
	int nscan = sscanf( CP temp, "1TP%lf,2TP%lf,3TP%lf",
	    posn+0, posn+1, posn+2 ) ;

	if( nscan != 3 ) {
	    DOLOG(0)(LOGDEV, 
		"Could not decode response from motor:%s.\r\n", temp ) ;
	    return( true ) ;
	}

	snprintf( CP temp, 64, "%.3f", posn[0] ) ;
	AddStatus( 0, UCP "Yaw", temp ) ;
	snprintf( CP temp, 64, "%.3f", posn[1] ) ;
	AddStatus( 1, UCP "Pitch", temp ) ;
	snprintf( CP temp, 64, "%.3f", posn[2] ) ;
	AddStatus( 2, UCP "Axis3", temp ) ;

	snprintf( CP resp, mlen, "%.3f,%.3f,%.3f", posn[0], posn[1], posn[2] ) ;
	return( true ) ;
    }

    if( strcasecmp( CP client_cmd.cmd[1], "state" ) == 0 ) {
        int nexc = Exchange( UCP "0MS", w_timeo, temp, sizeof(temp), r_timeo ) ;
        if( nexc <= 0 ) return( (nexc==0) ) ;
	if( nexc < (4+1+4+1+4+1+4) ) {
	    DOLOG(0)(LOGDEV, "Short response for %s state.\n", name ) ;
            errors++ ;
	    return( true ) ;
	}

	// Make this a little more rigorous! GAM
	int state[3] ;
	state[0] = temp[3] ;
	state[1] = temp[8] ;
	state[2] = temp[13] ;

	snprintf( CP temp, 64, "0x%02x", state[0] ) ;
	AddStatus( 3, UCP "State Yaw", temp ) ;
	snprintf( CP temp, 64, "0x%02x", state[1] ) ;
	AddStatus( 4, UCP "State Pitch", temp ) ;
	snprintf( CP temp, 64, "0x%02x", state[2] ) ;
	AddStatus( 5, UCP "State Axis3", temp ) ;

	snprintf( CP resp, mlen, "0x%02x,0x%02x,0x%02x", 
	    state[0], state[1], state[2] ) ;
	return( true ) ;
    }

    DOLOG(0)(LOGDEV, "Unknown command: %s\n", client_cmd.cmd[2] ) ;
    return( true ) ;
}

int Newport::Move( u_char *resp, int mlen ) 
{
    u_char command[256] ;
    u_char temp[256] ;
    int axis = 0 ;
    u_char absolute = 'A' ;

    if( strcasecmp( CP client_cmd.cmd[1], "yaw" ) == 0 ||
	strcasecmp( CP client_cmd.cmd[1], "axis1" ) == 0 ) {
	axis = 1 ;
    } else if( strcasecmp( CP client_cmd.cmd[1], "pitch" ) == 0 ||
	strcasecmp( CP client_cmd.cmd[1], "axis2" ) == 0 ) {
	axis = 2 ;
    } else if( strcasecmp( CP client_cmd.cmd[1], "axis3" ) == 0 ) {
	axis = 3 ;
    }

    if( !axis ) {
	DOLOG(0)(LOGDEV, "Not an axis (%s).\n", name ) ;
	return( true ) ;
    }

    double posn = strtod( CP client_cmd.cmd[3], 0 ) ;
    // Make sure the value is not preceding by white space.
    snprintf( CP temp, 64, "%f", posn ) ;
    u_char *q = temp ;
    while( *q == ' ' && *q != '\0' ) q++ ;

    if( strcasecmp( CP client_cmd.cmd[2], "move" ) == 0 ) absolute = 'R' ;

    snprintf( CP command, 256, "%1dP%c%s", axis, absolute, q ) ;

    // Don't expect a reply.
    int nexc = Exchange( command, w_timeo, resp, mlen, -250 ) ;
    if( nexc < 0 ) return( nexc ) ;
    return( true ) ;
}

int Newport::Halt( u_char *resp, int mlen ) 
{
    int nexc = Exchange( UCP "ST", w_timeo, resp, mlen, -250 ) ;
    if( nexc < 0 ) return( nexc ) ;
    return( true ) ;
}

int Newport::HandleRequest( void )
{
    if( Client::HandleRequest() )
        return( true ) ;

    int retval = 0 ;
    u_char response[256] ;

    int ncmds = client_cmd.nCmds ;
    if( ncmds == 3 && strcasecmp( CP client_cmd.cmd[2], "get" ) == 0 ) {
	retval = Retrieve( response, sizeof(response) ) ;
    } else if( ncmds == 4 && strcasecmp( CP client_cmd.cmd[2], "set" ) == 0 ) {
	retval = Move( response, sizeof(response) ) ;
    } else if( ncmds == 4 && strcasecmp( CP client_cmd.cmd[2], "move" ) == 0 ) {
	retval = Move( response, sizeof(response) ) ;
    } else if( ncmds == 2 && strcasecmp( CP client_cmd.cmd[1], "halt" ) == 0 ) {
	retval = Halt( response, sizeof(response) ) ;
    }
    if( !retval ) {
	DOLOG(0)(LOGDEV, "Bad response from %s\n", name ) ;
	return( false ) ;
    }

    DOLOG(0)( LOGDEV, "Response from %s: <<%s>>\n", name, response ) ;

    StatusLog->L_Command_U( name, mQueue->GetRequest(), response ) ;
    mQueue->SetResponse( response ) ;

    return( true ) ;
}
@


1.2
log
@Working version. About to add setup and init via network.
@
text
@d39 1
a39 1
        mPeriodics[i] = PeriodicQ->Add( getDevice(), temp, cycle ) ;
d45 1
a45 1
int Newport::ConnectionStarted( void )
d47 7
a53 1
    DisplayConnection() ;
d55 2
d58 1
a58 2
	PeriodicQ->Schedule( mPeriodics[i], cycle/2 + 1000*(i + 2*getDevice()));
	PeriodicQ->Enable( mPeriodics[i] ) ;
d60 5
d68 1
a68 1
void Newport::ConnectionEnded( void )
d70 1
a70 4
    for( int i = 0 ; i < nPeriodics ; i++ ) {
	PeriodicQ->Disable( mPeriodics[i] ) ;
    }
    Client::ConnectionEnded() ;
d75 1
a75 1
int Newport::Retrieve( sCmd input, u_char *resp, int mlen ) 
d77 1
a77 4
    u_char response[256] ;
    u_char temp[64] ;
    int nwrite ;
    int nread ;
d79 3
a81 2
    FlushStream( fd ) ;
    *resp = '\0' ;
a82 1
    if( strcasecmp( CP input.cmd[1], "position" ) == 0 ) {
d84 2
a85 9
	nwrite = WriteStream( UCP "0TP", w_timeo ) ;
	if( nwrite < 0 ) return( false ) ;
	nread = ReadStream( response, sizeof(response), r_timeo ) ;
	if( nread < 0 ) return( false ) ;
        if( nread == 0 ) {
            fprintf( stderr, "Timeout %s\n", name ) ;
            errors++ ;
            return( true ) ;
        }
a86 3
	strchomp( response ) ;
	int nscan = sscanf( CP response, "1TP%lf,2TP%lf,3TP%lf",
	    posn+0, posn+1, posn+2 ) ;
d88 3
a90 3
	    DOLOG(0)(LOGDEV, "Could not decode response from motor:%s.\r\n",
		response ) ;
	    return( false ) ;
d104 5
a108 13
    if( strcasecmp( CP input.cmd[1], "state" ) == 0 ) {
	int state[3] ;
	nwrite = WriteStream( UCP "0MS", w_timeo ) ;
	if( nwrite < 0 ) return( false ) ;
	nread = ReadStream( response, sizeof(response), r_timeo ) ;
	if( nread < 0 ) return( false ) ;
        if( nread == 0 ) {
            fprintf( stderr, "Timeout %s\n", name ) ;
            errors++ ;
            return( true ) ;
        }

	if( nread < (4+1+4+1+4+1+4) ) {
d113 5
a117 3
	state[0] = response[3] ;
	state[1] = response[8] ;
	state[2] = response[13] ;
d131 1
a131 1
    DOLOG(0)(LOGDEV, "Unknown command: %s\n", input.cmd[2] ) ;
d135 1
a135 1
int Newport::Move( sCmd input, u_char *resp, int mlen ) 
d138 1
a138 3
    u_char temp[64] ;
    int nwrite ;
    int nread ;
d142 2
a143 5
    FlushStream( fd ) ;
    *resp = '\0' ;

    if( strcasecmp( CP input.cmd[1], "yaw" ) == 0 ||
	strcasecmp( CP input.cmd[1], "axis1" ) == 0 ) {
d145 2
a146 2
    } else if( strcasecmp( CP input.cmd[1], "pitch" ) == 0 ||
	strcasecmp( CP input.cmd[1], "axis2" ) == 0 ) {
d148 1
a148 1
    } else if( strcasecmp( CP input.cmd[1], "axis3" ) == 0 ) {
d153 2
a154 2
	DOLOG(0)(LOGDEV, "No such axis.\n" ) ;
	return( false ) ;
d157 2
a158 1
    double posn = strtod( CP input.cmd[3], 0 ) ;
d163 1
a163 1
    if( strcasecmp( CP input.cmd[2], "move" ) == 0 ) absolute = 'R' ;
a165 10
    fprintf( stderr, "<%s>\n", command ) ;
    nwrite = WriteStream( command, w_timeo ) ;
    if( nwrite < 0 ) return( false ) ;
    nread = ReadStream( resp, mlen, 250 ) ; // short timeout as nothing is rtn.
    if( nread < 0 ) return( false ) ;
    if( nread == 0 ) {
	fprintf( stderr, "Timeout %s\n", name ) ;
	errors++ ;
	return( true ) ;
    }
d167 3
d172 2
a173 1
int Newport::Halt( sCmd input, u_char *resp, int mlen ) 
d175 2
a176 16
    int nwrite ;
    int nread ;

    FlushStream( fd ) ;
    *resp = '\0' ;

    nwrite = WriteStream( UCP "ST", w_timeo ) ;
    if( nwrite < 0 ) return( false ) ;
    nread = ReadStream( resp, mlen, 250 ) ;
    if( nread < 0 ) return( false ) ;
    if( nread == 0 ) {
	fprintf( stderr, "Timeout %s\n", name ) ;
	errors++ ;
	return( true ) ;
    }

d182 3
a184 1
    u_char response[256] = "EMPTY" ;
d186 1
d188 9
a196 22
    const u_char *request ;
    mQueue->GetNextTransaction() ;

    request = mQueue->GetRequest() ;
    DOLOG(0)( LOGDEV, "client request %s: <%s>\n", name, request ) ;

    mQueue->SetResponse( NULL ) ;

    sCmd s_cmd ;
    int ncmds = TokenizeRequest( request, s_cmd ) ;
    if( ncmds < 2 ) {
	return( true ) ; // null or pointless command, but not an error.
    }

    if( ncmds == 3 && strcasecmp( CP s_cmd.cmd[2], "get" ) == 0 ) {
	retval = Retrieve( s_cmd, response, sizeof(response) ) ;
    } else if( ncmds == 4 && strcasecmp( CP s_cmd.cmd[2], "set" ) == 0 ) {
	retval = Move( s_cmd, response, sizeof(response) ) ;
    } else if( ncmds == 4 && strcasecmp( CP s_cmd.cmd[2], "move" ) == 0 ) {
	retval = Move( s_cmd, response, sizeof(response) ) ;
    } else if( ncmds == 2 && strcasecmp( CP s_cmd.cmd[1], "halt" ) == 0 ) {
	retval = Halt( s_cmd, response, sizeof(response) ) ;
d203 1
a203 1
    DOLOG(0)( LOGDEV, "client response %s: <<%s>>\n", name, response ) ;
d205 1
a205 4
    StatusLog->Lock() ;
    StatusLog->Write( name, "CMD", request ) ;
    StatusLog->Write( name, "RTN", response ) ;
    StatusLog->Unlock() ;
@


1.1
log
@Initial revision
@
text
@d25 1
d39 1
a39 1
        mPeriodics[i] = PeriodicQ->Add( getDevice(), temp, 2000 ) ;
d50 1
a50 1
	PeriodicQ->Schedule( mPeriodics[i], 5000 + 2000*i ) ;
d79 1
a79 1
	if( nwrite <= 0 ) return( false ) ;
d81 7
a87 1
	if( nread <= 0 ) return( false ) ;
d111 1
a111 1
	if( nwrite <= 0 ) return( false ) ;
d113 7
a119 1
	if( nread <= 0 ) return( false ) ;
d121 2
a122 1
	    return( false ) ;
d124 1
d163 1
a163 1
    } else if( strcasecmp( CP input.cmd[1], "pitch" ) == 0 ) {
d180 1
d182 8
a189 3
    if( nwrite <= 0 ) return( false ) ;
    nread = ReadStream( resp, mlen, r_timeo ) ;
    if( nread <= 0 ) return( false ) ;
d202 8
a209 3
    if( nwrite <= 0 ) return( false ) ;
    nread = ReadStream( resp, mlen, r_timeo ) ;
    if( nread <= 0 ) return( false ) ;
d243 1
a243 1
	fprintf( stderr, "no response.\n" ) ;
@
