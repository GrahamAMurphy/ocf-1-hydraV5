head	5.1;
access;
symbols;
locks
	murphy:5.1.10.1597
	murphy:5.1.8.1550
	murphy:5.1.9.1596; strict;
comment	@ * @;


5.1
date	2014.11.11.12.11.56;	author murphy;	state Exp;
branches
	5.1.8.1
	5.1.9.1593
	5.1.10.1597;
next	1.9;

1.9
date	2004.09.10.11.43.48;	author murphy;	state Exp;
branches;
next	1.8;

1.8
date	2004.07.12.18.08.57;	author murphy;	state Exp;
branches;
next	1.7;

1.7
date	2004.06.30.17.50.08;	author murphy;	state Exp;
branches;
next	1.6;

1.6
date	2004.06.20.16.26.39;	author murphy;	state Exp;
branches;
next	1.5;

1.5
date	2004.06.15.12.49.10;	author murphy;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.10.15.36.12;	author murphy;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.16.15.44;	author murphy;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.04.23.56.41;	author murphy;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.03.13.01.45;	author murphy;	state Exp;
branches;
next	;

5.1.8.1
date	2014.11.11.12.11.56;	author murphy;	state Exp;
branches;
next	5.1.8.1550;

5.1.8.1550
date	2014.11.11.12.22.58;	author murphy;	state Exp;
branches;
next	;

5.1.9.1593
date	2015.01.07.19.14.24;	author murphy;	state Exp;
branches;
next	5.1.9.1596;

5.1.9.1596
date	2015.07.28.16.02.31;	author murphy;	state Exp;
branches;
next	;

5.1.10.1597
date	2015.07.28.16.07.19;	author murphy;	state Exp;
branches;
next	;


desc
@Defines Stream class.
@


5.1
log
@5.1
@
text
@#ifndef __Stream_h__
#define __Stream_h__

#pragma interface

#include <sys/types.h>
#include <pthread.h>
#include <semaphore.h>

#ifdef FILE_H_HAVE
#undef FILE_H_HAVE
#endif
#define FILE_H_HAVE (2)
#include "extern.h"

const static int TX_BUFFSZ = 1024 ;
const static int RX_BUFFSZ = 1024 ;
const static int MAXSTREAM = 32 ;
const static int MAXALIASES = 8 ;
const static u_char OUTPUT_TERMINATION[4] = "\r\n\r" ;
const static u_char INPUT_TERMINATION[4] = "\r\n\r" ;

#include "queue.h"

class Stream {
    int devicenum ;
    int WriteStream( const u_char*, int ) ;
    int ReadStream( u_char*, int, int ) ;
    int l_errno ;

protected:
    volatile int fd ;
    int iOutputTermS ;
    int iOutputTermL ;
    int iInputTermS ;
    int iInputTermL ;
    u_char *name ;
    u_char *alias[MAXALIASES] ;
    u_char buff_tx[TX_BUFFSZ] ;
    int tx_pnt ;
    u_char buff_rx[RX_BUFFSZ] ;
    int rx_pnt ;
    int r_timeo, w_timeo ;
    int mStatus ;
    volatile int stream_state ;
    int cycle, delay ;
    volatile int enabled ;
    volatile bool can_report ;
    volatile int errors, n_cmds ;
    inline void ClearNCmds( void ) { n_cmds = 0 ; }
    inline void ClearNErrs( void ) { errors = 0 ; }
    sem_t sem_device ;
    int is_a_client ;
    int is_a_server ;
    pthread_t m_t_thread ;
    void WaitOnSignal( void ) ;
    void ClearWait( void ) ;
    int Exchange( const void*, int, u_char*, int, int ) ;
    int DoExchange( const void*, int, u_char*, int, int ) ;
    bool flush_after_timeout ;
    bool last_rx_timedout ;
    inline void ResetRxTimedOut( void ) { last_rx_timedout = false ; } ;
    inline void SetRxTimedOut( void ) { last_rx_timedout = true ; } ;
    int GetRxTimedOut( void ) ;
    virtual int Parse( u_char *key, u_char *value ) ;

public:
    Stream() ;
    virtual ~Stream() ;
    inline void Enable( bool start ) { enabled = start ; }
    inline int IsEnabled( void ) { return( enabled ) ; }
    inline int getFd( void ) { return( fd ) ; } ;
    inline void setFd( int in_fd ) { fd = in_fd ; } ;
    inline void setDevice( int device ) { devicenum = device ; } ;
    inline int getDevice( void ) { return( devicenum ) ; } ;
    void setName( const u_char* ) ;
    inline void setName( const char *in ) { setName( (const u_char*)in ) ; } ;
    inline const u_char* getName( void ) { return( (const u_char*) name ) ; } ;
    void setAlias( u_char* ) ;
    inline void setAlias( char *in ) { setAlias( (u_char*)in ) ; } ;
    const u_char* getAlias( int ) ;
    inline const u_char* getAlias( void ) { return getAlias( 0 ) ; } ;

    enum DeviceType { 
	TypeNone = 0, 
	TypeServer,
	TypeClient,
	TypeTempMon,
	TypeMonochromator,
	TypeFilterWheel,
	TypeSR630,
	TypeMM4005,
	TypeKE617,
	TypeKE6514,
	TypeLabsphere,
	TypeKlingerMC4,
	TypeUnidex11,
	TypeUnidex511,
	TypePRM100,
	TypePM2813,
	TypeUDTS370,
	TypeUDTS470,
	TypeHTTP,
	TypeXML,
	TypeThermalServer,
	TypeNewportTH
	} ;
    void setType( DeviceType device ) { devtype = device ; } ;
    DeviceType getType( void ) { return( devtype ) ; } ;
    const char *getTypeString( void ) ;
    Queue *mQueue ;
    virtual void StartOps( void ) ;
    virtual void RunThread( void ) ;
    virtual void StopOps( void ) ;
    void StartThread( void ) ;
    void SignalDevice( void ) ;
    int SetOptions( u_char* ) ;
    virtual void PleaseReport( int, int ) ;
    inline void Enable( void ) { enabled = true ; }
    inline void Disable( void ) { enabled = false ; }
    inline int IsAClient( void ) { return( is_a_client ) ; } ;
    inline int IsAServer( void ) { return( is_a_server ) ; } ;
    bool Active( void ) ;

protected:
    const char *devtypestring ;
    DeviceType devtype ;
} ;

EXTERN Stream *streams[MAXSTREAM] ;

// put this prototype here for now.
void * RunObjectInThread( void * ) ;


#endif // __Stream_h__
@


5.1.10.1597
log
@5.1.10.1597
@
text
@a105 2
	TypeSBI4000,
	TypeNewmark,
@


5.1.9.1593
log
@5.1.9.1593
@
text
@a105 1
	TypeSBI4000,
@


5.1.9.1596
log
@5.1.9.1596
@
text
@a106 1
	TypeNewmark,
@


5.1.8.1
log
@5.1.8.1
@
text
@@


5.1.8.1550
log
@5.1.8.1550
@
text
@a105 1
	TypeSBI4000,
@


1.9
log
@Working system. Backing up.
@
text
@d18 4
a21 1
const static int MAXSTREAM = 16 ;
d33 6
a38 1
    u_char *name, *alias ;
d76 2
a77 4
    virtual void HandleRx( void ) ;
    virtual void HandleTx( void ) ;
    void setName( u_char* ) ;
    inline void setName( char *in ) { setName( (u_char*)in ) ; } ;
d81 2
a82 1
    inline const u_char* getAlias( void ) { return( (const u_char*) alias ) ; };
d98 5
d104 3
a106 1
	TypeThermalServer
d114 1
@


1.8
log
@Working Version. SRS630 included.
@
text
@a22 5
    int lCanRead ;
    int lCanWrite ;
    int gCanRead ;
    int gCanWrite ;
    int txpending ;
d45 2
d51 6
a56 2
    int timeout_state ;
    void ResetTimeoutState( void ) ;
d61 1
a63 9
    inline int GetgCanRead( void ) { return( gCanRead ) ; } ;
    inline int GetgCanWrite( void ) { return( gCanWrite ) ; } ;
    inline void SetgCanRead( int can_read ) { gCanRead = can_read ; } ;
    inline void SetgCanWrite( int can_write ) { gCanWrite = can_write ; } ;
    inline int GetlCanRead( void ) { return( lCanRead ) ; } ;
    inline int GetlCanWrite( void ) { return( lCanWrite ) ; } ;
    inline void SetlCanRead( int can_read ) { lCanRead = can_read ; } ;
    inline void SetlCanWrite( int can_write ) { lCanWrite = can_write ; } ;
    inline int TxPending( void ) { return( txpending ) ; } ;
d65 1
a65 1
    inline int setFd( int in_fd ) { fd = in_fd ; } ;
d106 2
@


1.7
log
@Found bug in queue handling. Depend upon labview timeout.
@
text
@d45 1
d55 2
d109 1
a109 1
    virtual int SetOptions( u_char* ) ;
@


1.6
log
@Working, but revising LOG notation, changing to DBG.
@
text
@d34 1
a34 1
    int fd ;
d42 1
a42 1
    int stream_state ;
d44 1
a44 1
    int enabled ;
d52 2
a53 1
    int Exchange( const u_char*, int, u_char*, int, int ) ;
d89 3
a91 2
	TypeNewport,
	TypeElectrometer,
d93 2
d96 1
@


1.5
log
@Working version. About to add setup and init via network.
@
text
@d29 3
a31 1
    volatile int enabled ;
d43 5
a47 1
    int cycle ;
d51 2
d103 3
a109 2
    int WriteStream( const u_char*, int ) ;
    int ReadStream( u_char*, int, int ) ;
@


1.4
log
@Working for CRISM config.
@
text
@d29 1
a29 1
    int enabled ;
d41 1
a42 2
    // pthread_cond_t sem_device ;
    // pthread_mutex_t mx_sem_device ;
@


1.3
log
@Working.
@
text
@d83 1
@


1.2
log
@Working. Supports SR630.
@
text
@d39 5
a43 2
    pthread_cond_t sem_device ;
    pthread_mutex_t mx_sem_device ;
d45 1
d80 4
a83 1
	TypeSR630
d86 2
d94 5
a100 3

private:
    DeviceType devtype ;
@


1.1
log
@Initial revision
@
text
@d29 1
d33 1
a33 1
    u_char *name ;
d38 1
a38 1
    // sem_t sem_device ;
d45 15
a59 13
    int GetgCanRead( void ) { return( gCanRead ) ; } ;
    int GetgCanWrite( void ) { return( gCanWrite ) ; } ;
    void SetgCanRead( int can_read ) { gCanRead = can_read ; } ;
    void SetgCanWrite( int can_write ) { gCanWrite = can_write ; } ;
    int GetlCanRead( void ) { return( lCanRead ) ; } ;
    int GetlCanWrite( void ) { return( lCanWrite ) ; } ;
    void SetlCanRead( int can_read ) { lCanRead = can_read ; } ;
    void SetlCanWrite( int can_write ) { lCanWrite = can_write ; } ;
    int TxPending( void ) { return( txpending ) ; } ;
    int getFd( void ) { return( fd ) ; } ;
    int setFd( int in_fd ) { fd = in_fd ; } ;
    void setDevice( int device ) { devicenum = device ; } ;
    int getDevice( void ) { return( devicenum ) ; } ;
d65 13
a77 1
    enum DeviceType { TypeNone = 0, TypeServer = 1, TypeClient = 2 } ;
d84 3
@
