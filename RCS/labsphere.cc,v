head	5.1;
access;
symbols;
locks
	murphy:5.1.8.1; strict;
comment	@// @;


5.1
date	2014.11.11.12.11.56;	author murphy;	state Exp;
branches
	5.1.8.1;
next	1.7;

1.7
date	2004.09.10.11.42.44;	author murphy;	state Exp;
branches;
next	1.6;

1.6
date	2004.07.22.18.34.23;	author murphy;	state Exp;
branches;
next	1.5;

1.5
date	2004.07.12.18.08.57;	author murphy;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.30.17.50.08;	author murphy;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.20.16.26.39;	author murphy;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.15.12.49.10;	author murphy;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.10.15.36.12;	author murphy;	state Exp;
branches;
next	;

5.1.8.1
date	2014.11.11.12.11.56;	author murphy;	state Exp;
branches;
next	;


desc
@Working for CRISM config.
@


5.1
log
@5.1
@
text
@#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <termio.h>
#include <unistd.h>

#include <iostream>

#pragma implementation

#include "global.h"
#include "stream.h"
#include "client.h"
#include "labsphere.h"
#include "support.h"
#include "periodic.h"

Labsphere::Labsphere( void )
{
    devtype = TypeLabsphere ;
    devtypestring = "Labsphere SC-5500" ;
    cycle = 5000 ; // 5.0 secs
    delay = 2000 ; // 2.0 secs

    attenuator_state[0] = -1 ; // The "don't know" state.
    attenuator_state[1] = -1 ;
    attenuator_state[2] = -1 ;
    attenuator_state[3] = -1 ;

    DODBG(9)(DBGDEV, "Leaving labsphere constructor.\n" ) ; 
}

void Labsphere::StartOps( void )
{
    DODBG(9)(DBGDEV, "%s: Labsphere being started up.\n", name ) ;
    mStatus = OCF_Status->RequestStatus( 5 ) ; // Intensity & attenuators.

    u_char temp[256] ;
    snprintf( CP temp, 256, "%s detector get", getAlias() ) ;
    mPeriodics[0] = PeriodicQ->Add( getDevice(), temp ) ;

    StartThread() ;
}

void Labsphere::StartPeriodicTasks( void )
{
    for( int i = 0 ; i < nPeriodics ; i++ ) {
        PeriodicQ->SetPeriod( mPeriodics[i], cycle ) ;
        PeriodicQ->Schedule( mPeriodics[i], delay ) ;
        PeriodicQ->Enable( mPeriodics[i] ) ;
    }
}

void Labsphere::StopPeriodicTasks( void )
{
    for( int i = 0 ; i < nPeriodics ; i++ ) {
        PeriodicQ->Disable( mPeriodics[i] ) ;
    }
}

void Labsphere::JKJoke( u_char value, u_char mask, u_char *str )
{
    int unmask = 0x80 ;
    int posn = 8 ;
    u_char small[8] ;

    strcpy( CP str, "" ) ;

    while( unmask ) {
	if( mask & unmask ) {
	    if( value & unmask ) 
		snprintf( CP small, 8, "J%1d", posn ) ;
	    else
		snprintf( CP small, 8, "K%1d", posn ) ;
	    strcat( CP str, CP small ) ;
	}
	unmask >>= 1 ;
	posn-- ;
    }

}

void Labsphere::GetAttenuatorCmds( int attenuator, int level, u_char **str )
{
    u_char *buffer ;
    int b_len ;
    u_char pinout[128] ;

    buffer = str[0] ;
    str[0] = 0 ;

    JKJoke( level, 0xff, pinout ) ;
    sprintf( CP buffer, "P1%sX", pinout ) ;
    b_len = strlen( CP buffer ) + 1 ;
    str[0] = buffer ;
    str[1] = 0 ;
    buffer += b_len ;

    JKJoke( attenuator, 0x07, pinout ) ;
    sprintf( CP buffer, "P2%sX", pinout ) ;
    b_len = strlen( CP buffer ) + 1 ;
    str[1] = buffer ;
    str[2] = 0 ;
    buffer += b_len ;

    JKJoke( 0x04, 0x04, pinout ) ;
    sprintf( CP buffer, "P2%sX", pinout ) ;
    b_len = strlen( CP buffer ) + 1 ;
    str[2] = buffer ;
    str[3] = 0 ;
    buffer += b_len ;
}

int Labsphere::SetAttenuator( int s_atten, int level, u_char *resp, int mlen )
{
    int nexc = 1 ;
    u_char tmp[256] ;
    u_char *(cmds[8]) ;
    u_char cmds_buffer[1024] ;

    // this should NEVER happen!
    if( s_atten < 1 || s_atten > 4 ) return( false ) ;

    cmds[0] = cmds_buffer ; cmds[1] = 0 ;
    GetAttenuatorCmds( s_atten-1, level, cmds ) ;
    for( int i = 0 ; i < 8 ; i++ ) {
	if( cmds[i] == 0 ) break ;
	fprintf( stderr, "lab cmd %d <%s>\n", i, cmds[i] ) ;
	StatusLog->L_Write_U( name, "CMD", cmds[i] ) ;
	nexc = Exchange( cmds[i], w_timeo, resp, sizeof(resp), r_timeo ) ;
	// These commands are critical to correct operation.
	// and cannot be read back in a reliable manner.
	if( nexc <= 0 ) return( nexc ) ; // something happened.
    }
    attenuator_state[s_atten-1] = level ;

    snprintf( CP tmp, sizeof(tmp), "Att %d", s_atten ) ;
    snprintf( CP resp, mlen, "%d", level ) ;
    AddStatus( s_atten, tmp, resp ) ;
    return( nexc ) ;
}

int Labsphere::DeviceOpen( void )
{
    int nexc ;
    u_char resp[256] ;
    const char *command = "L0H1A0C2N1Z1F1X" ; // From DO.

    StatusLog->L_Write_U( name, "CMD", command ) ;
    nexc = Exchange( command, w_timeo, resp, sizeof(resp), -r_timeo ) ;
    // These commands are critical to correct operation.
    if( nexc <= 0 ) return( false ) ; // something happened.

    StartPeriodicTasks() ;
    return( true ) ;
}

void Labsphere::DeviceClose( void )
{
    StopPeriodicTasks() ;
}

#define NOSTATUS        NoStatus(0)

// Only returns false if we deem a communication error demands or implies
// a disconnect.
int Labsphere::AddressDetector( u_char *resp, int mlen )
{
    u_char tmp[256] ;

    if( strcasecmp( CP client_cmd.cmd[2], "get" ) == 0 ) {
        int nexc = Exchange( UCP "X", w_timeo, tmp, sizeof(tmp), r_timeo ) ;
        if( nexc < 0 ) { NOSTATUS; SET_406_BADCON(resp,mlen); return(false) ; } 
	if( nexc == 0 ) { NOSTATUS; SET_407_DEVTO(resp,mlen); return(true) ; } 

	double value ;
	int nscan = sscanf( CP tmp, "%le", &value ) ;
	if( nscan != 1 ) { NOSTATUS ; SET_407_DEVTO(resp,mlen); return(true) ; }

	snprintf( CP resp, mlen, "%.4e", value ) ;
	AddStatus( 0, UCP "Detector", resp ) ;
	return( true ) ;
    }

    DODBG(0)(DBGDEV, "Unknown command: %s\n", client_cmd.cmd[2] ) ;
    snprintf( CP resp, mlen, ERR_408_BADCMD ": %s to %s", 
        client_cmd.cmd[1], name ) ; 
    return( true ) ;
}

int Labsphere::AddressAttenuator( u_char *resp, int mlen )
{
    int atten_g = -1 ;
    if( client_cmd.cmd[2] ) atten_g = strtol( CP client_cmd.cmd[2], 0, 0 ) ;

    if( atten_g < 1 || atten_g > 4 ) atten_g = -1 ;
    if( atten_g < 1) {
	DODBG(0)(DBGDEV, "Invalid attenuator: %s\n", client_cmd.cmd[2] ) ;
	snprintf( CP resp, mlen, ERR_408_BADCMD ": %s to %s",
	    client_cmd.cmd[1], name ) ;
	return( true ) ;
    }

    if( client_cmd.nCmds==4 && STRCASECMP( client_cmd.cmd[3], "get" ) == 0 ) {
	snprintf( CP resp, mlen, "%d", attenuator_state[ atten_g-1 ] ) ;
	return( true ) ;
    }

    if( client_cmd.nCmds != 5 || STRCASECMP(client_cmd.cmd[3], "set" ) != 0) {
	DODBG(0)(DBGDEV, "Bad command: %s\n", client_cmd.cmd[3] ) ;
	snprintf( CP resp, mlen, ERR_408_BADCMD ": %s to %s",
	client_cmd.cmd[1], name ) ;
	return( true ) ;
    }

    int value ;
    int nscan = sscanf( CP client_cmd.cmd[4], "%d", &value ) ;
    if( nscan != 1 || value < 0 || value > 255 ) {
	DODBG(0)(DBGDEV, "Bad attenuator value: %s\n", client_cmd.cmd[4] ) ;
	snprintf( CP resp, mlen, ERR_408_BADCMD ": %s to %s",
	client_cmd.cmd[1], name ) ;
	return( true ) ;
    }

    int nexc = SetAttenuator( atten_g, value, resp, mlen ) ;
    if( nexc < 0 ) { 
	NoStatus(atten_g) ; SET_406_BADCON(resp,mlen); return(false) ;
    } 
    if( nexc == 0 ) { 
	NoStatus(atten_g) ; SET_407_DEVTO(resp,mlen); return(true) ;
    }
    return( true ) ;
}

int Labsphere::HandleRequest( void )
{
    if( Client::HandleRequest() )
	return( true ) ;

    if( client_cmd.nCmds < 3 ) {
        DODBG(0)(DBGDEV, "Null command: %s\n", client_cmd.cmd[1] ) ;
        mQueue->SetResponse( ERR_408_BADCMD ) ;
        return( true ) ;
    }

    u_char response[256] ;
    int retval = 0 ;
    int nCmds = client_cmd.nCmds ;

    if( STRCASECMP( client_cmd.cmd[1], "attenuator" ) == 0 ) {
        retval = AddressAttenuator( response, sizeof(response) ) ;
    } else if( nCmds==3  && STRCASECMP( client_cmd.cmd[1], "detector" ) == 0 ) {
        retval = AddressDetector( response, sizeof(response) ) ;
    } else {
        DODBG(0)(DBGDEV, "Unknown command: %s\n", client_cmd.cmd[1] ) ;
        snprintf( CP response, sizeof(response), ERR_408_BADCMD ": %s to %s",
        client_cmd.cmd[1], name ) ; 
        retval = true ;
    }

    mQueue->SetResponse( response ) ; 
    DODBG(0)( DBGDEV, "client response %s: <%s>\n", name, response ) ;
    StatusLog->L_Command_U( name, mQueue->GetRequest(), response ) ; 
    return( retval ) ;
}

static const char* cClientOptions[] = {
    "detector get",
    "attenuator %d get",
    "attenuator %d set %d"
    } ;

int Labsphere::ListOptions( int iN, u_char *cOption, int iOptionLength )
{
    int M = 0 ;
    strcpy( CP cOption, "" ) ;

    int iMax = sizeof(cClientOptions)/sizeof(char*) ;

    if( 0 <= iN && iN < iMax ) {
        strncpy( CP cOption, cClientOptions[iN], iOptionLength ) ;
	M = strlen( CP cOption ) ;
    } else {
	M = Client::ListOptions( iN-iMax, cOption, iOptionLength ) ;
    }
    return( M ) ;
}

@


5.1.8.1
log
@5.1.8.1
@
text
@@


1.7
log
@Working system. Backing up.
@
text
@d148 1
a148 1
    char *command = "L0H1A0C2N1Z1F1X" ; // From DO.
d267 23
@


1.6
log
@Working version.
@
text
@d108 1
a108 1
    sprintf( CP buffer, "P3%sX", pinout ) ;
d117 1
a117 1
    int nexc ;
@


1.5
log
@Working Version. SRS630 included.
@
text
@d25 6
d37 1
a37 1
    mStatus = OCF_Status->RequestStatus( 1 ) ; // One key state.
d40 1
a40 1
    snprintf( CP temp, 256, "%s get", getAlias() ) ;
d62 82
d148 1
a148 1
    char *command = "L1H1A0C2N1Z1F1X" ; // From DO.
d153 1
a153 1
    if( nexc < 0 ) return( false ) ; // something happened.
d164 1
d170 13
a182 5
    if( strcasecmp( CP client_cmd.cmd[1], "get" ) == 0 ) {
        int nexc = Exchange( UCP "X", w_timeo, resp, mlen, r_timeo ) ;
        if( nexc < 0 ) { SET_406_BADCON(resp,mlen) ; return( false ) ; } 
	if( nexc == 0 ) { SET_407_DEVTO(resp,mlen) ; return( true ) ; } 
	AddStatus( 0, UCP "Brightness", resp ) ;
d186 1
a186 1
    DODBG(0)(DBGDEV, "Unknown command: %s\n", client_cmd.cmd[1] ) ;
d192 44
d238 7
a244 3
    if( client_cmd.nCmds != 2 ) {
	mQueue->SetResponse( ERR_408_BADCMD ) ;
	return( true ) ; // null or pointless command, but not an error.
d248 13
a261 1
    int retval = AddressDetector( response, sizeof(response) ) ;
a266 1

@


1.4
log
@Found bug in queue handling. Depend upon labview timeout.
@
text
@d98 1
@


1.3
log
@Working, but revising LOG notation, changing to DBG.
@
text
@a20 2
    r_timeo = 1000 ; // 1.0 secs
    w_timeo = 5000 ; // 5.0 secs
d23 3
a25 2
    cycle = 1000 ; // 1.0 secs
    DOLOG(9)(LOGDEV, "Leaving labsphere constructor.\n" ) ; 
d30 1
a30 1
    DOLOG(9)(LOGDEV, "%s: Labsphere being started up.\n", name ) ;
d58 9
d83 2
a84 1
        if( nexc <= 0 ) return( (nexc==0) ) ;
d89 3
a91 1
    DOLOG(0)(LOGDEV, "Unknown command: %s\n", client_cmd.cmd[1] ) ;
d103 5
a107 9
    if( ! AddressDetector( response, sizeof(response) ) )
	return( false ) ;

    DOLOG(0)( LOGDEV, "Response %s: <<%s>>\n", name, response ) ;

    StatusLog->L_Command_U( name, mQueue->GetRequest(), response ) ;
    mQueue->SetResponse( response ) ;

    return( true ) ;
@


1.2
log
@Working version. About to add setup and init via network.
@
text
@d25 1
a25 1
    cycle = 10000 ; // 10.0 secs
d36 1
a36 1
    mPeriodics[0] = PeriodicQ->Add( getDevice(), temp, cycle ) ;
d41 1
a41 1
int Labsphere::ConnectionStarted( void )
d43 6
a48 1
    DisplayConnection() ;
d50 2
d53 1
a53 2
	PeriodicQ->Schedule( mPeriodics[i], cycle/2 + 1000*(i + 2*getDevice()));
	PeriodicQ->Enable( mPeriodics[i] ) ;
d55 5
d63 1
a63 1
void Labsphere::ConnectionEnded( void )
d65 1
a65 4
    for( int i = 0 ; i < nPeriodics ; i++ ) {
	PeriodicQ->Disable( mPeriodics[i] ) ;
    }
    Client::ConnectionEnded() ;
d68 1
d71 1
a71 1
int Labsphere::AddressDetector( sCmd input, u_char *resp, int mlen )
d73 3
a75 17
    int nwrite ;
    int nread ;

    FlushStream( fd ) ;
    *resp = '\0' ;

    if( strcasecmp( CP input.cmd[1], "get" ) == 0 ) {
	nwrite = WriteStream( UCP "X", w_timeo ) ;
	if( nwrite <= 0 ) return( false ) ;
	nread = ReadStream( resp, mlen, r_timeo ) ;
	if( nread < 0 ) return( false ) ;
	if( nread == 0 ) {
	    fprintf( stderr, "Timeout %s\n", name ) ;
	    errors++ ;
	    return( true ) ;
	}
	strchomp( resp ) ;
d80 1
a80 1
    DOLOG(0)(LOGDEV, "Unknown command: %s\n", input.cmd[1] ) ;
d86 1
a86 13
    u_char response[256] = "EMPTY" ;

    const u_char *request ;
    mQueue->GetNextTransaction() ;

    request = mQueue->GetRequest() ;
    DOLOG(0)( LOGDEV, "client request %s: <%s>\n", name, request ) ;

    mQueue->SetResponse( NULL ) ;

    sCmd s_cmd ;
    int ncmds = TokenizeRequest( request, s_cmd ) ;
    if( ncmds != 2 ) {
d90 3
a92 1
    if( ! AddressDetector( s_cmd, response, sizeof(response) ) )
d95 1
a95 1
    DOLOG(0)( LOGDEV, "client response %s: <<%s>>\n", name, response ) ;
d97 1
a97 4
    StatusLog->Lock() ;
    StatusLog->Write( name, "CMD", request ) ;
    StatusLog->Write( name, "RTN", response ) ;
    StatusLog->Unlock() ;
@


1.1
log
@Initial revision
@
text
@d25 1
d36 1
a36 1
    mPeriodics[0] = PeriodicQ->Add( getDevice(), temp, 10000 ) ;
d46 1
a46 1
	PeriodicQ->Schedule( mPeriodics[i], 10000 + 3000*i ) ;
d74 6
a79 1
	if( nread <= 0 ) return( false ) ;
@
